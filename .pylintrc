[MAIN]

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Files or directories to be skipped. They should be base names, not paths.
ignore=CVS,.venv,.build,cdk.out

# Add files or directories matching the regex patterns to the ignore-list. The
# regex matches against paths and can be in Posix or Windows format.
ignore-paths=

# Files or directories matching the regex patterns are skipped. The regex
# matches against base names, not paths.
ignore-patterns=^\.##

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=
    pylint.extensions.check_elif, pylint.extensions.bad_builtin, pylint.extensions.docparams,
    pylint.extensions.for_any_all, pylint.extensions.set_membership, pylint.extensions.code_style,
    pylint.extensions.overlapping_exceptions, pylint.extensions.typing, pylint.extensions.redefined_variable_type,
    pylint.extensions.comparison_placement, pylint.extensions.dict_init_mutate,
    pylint.extensions.consider_refactoring_into_while_condition,

# Use multiple processes to speed up Pylint. Specifying 0 will auto-detect the
# number of processors available to use.
jobs=4

# When enabled, pylint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode=yes

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
extension-pkg-allow-list=

# Minimum supported python version
py-version=3.8.0

# Control the amount of potential inferred values when inferring a single
# object. This can help the performance when dealing with large functions or
# complex, nested conditions.
limit-inference-results=100

# Specify a score threshold under which the program will exit with error.
fail-under=10.0

# Return non-zero exit code if any of these messages/categories are detected,
# even if score is above --fail-under value. Syntax same as enable. Messages
# specified are enabled, while categories only check already-enabled messages.
fail-on=

# Clear in-memory caches upon conclusion of linting. Useful if running pylint
# in a server-like mode.
clear-cache-post-run=no

[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
# confidence=

# Enable the message, report, category or checker with the given id(s).
enable=
    use-symbolic-message-instead, useless-suppression,

# Disable the message, report, category or checker with the given id(s).
disable=
    attribute-defined-outside-init, invalid-name, missing-docstring, protected-access, too-few-public-methods,
    # handled by black
    format,
    # We anticipate #3512 where it will become optional
    fixme, consider-using-assignment-expr,

[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html.
output-format=text

# Tells whether to display a full report or only the messages.
reports=no

# Python expression which should return a note less than 10 (10 is the highest
# note). This score is used by the global evaluation report (RP0004).
evaluation=max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))

# Activate the evaluation score.
score=yes

[LOGGING]

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules=logging

# The type of string formatting that logging methods do.
logging-format-style=old

[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO

[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=6

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=yes

# Signatures are removed from the similarity computation.
ignore-signatures=yes

[VARIABLES]

# List of additional names supposed to be defined in builtins.
additional-builtins=

# List of strings which can identify a callback function by name.
callbacks=cb_,_cb

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables=yes

# List of names allowed to shadow builtins.
allowed-redefined-builtins=

# List of qualified module names which can have objects that can redefine builtins.
redefining-builtins-modules=six.moves,past.builtins,future.builtins,builtins,io

[FORMAT]

# Maximum number of characters on a single line.
max-line-length=100

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt=no

# Allow the body of a class to be on the same line as the declaration if body contains single statement.
single-line-class-stmt=no

# Maximum number of lines in a module.
max-module-lines=2000

# String used as indentation unit.
indent-string='    '

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren=4

[BASIC]

# Good variable names which should always be accepted, separated by a comma.
good-names=i,j,k,ex,Run,_

# Bad variable names which should always be refused.
bad-names=foo,bar,baz,toto,tutu,tata

# Naming style matching correct function names.
function-naming-style=snake_case

# Naming style matching correct variable names.
variable-naming-style=snake_case

# Naming style matching correct constant names.
const-naming-style=UPPER_CASE

# Naming style matching correct attribute names.
attr-naming-style=snake_case

# Naming style matching correct argument names.
argument-naming-style=snake_case

[EXCEPTIONS]

# Exceptions that will emit a warning when being caught.
overgeneral-exceptions=builtins.Exception

[REFACTORING]

# Maximum number of nested blocks for function/method body.
max-nested-blocks=5

# Complete name of functions that never return.
never-returning-functions=sys.exit,argparse.parse_error
